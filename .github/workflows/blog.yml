name: Cybersecurity Blog

on:
  workflow_dispatch:  # Allows manual triggering

permissions: write-all  # Ensure GitHub Actions has permission to push changes

jobs:
  generate-blog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: pip install requests

      - name: Verify API Key
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "‚ùå ERROR: Missing API Key! Make sure GEMINI_API_KEY is set in GitHub Secrets."
            exit 1
          else
            echo "‚úÖ API Key detected. Proceeding..."
          fi

      - name: Generate Blog Content
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python <<EOF
          import requests
          import json
          import os
          from datetime import datetime

          API_KEY = os.getenv("GEMINI_API_KEY")
          if not API_KEY:
              print("‚ùå ERROR: API Key is missing!")
              exit(1)

          URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=" + API_KEY

          prompt = {
              "contents": [{
                  "role": "user",
                  "parts": [{
                      "text": "Write a detailed cybersecurity blog post about the latest threats in 2024, best security practices, and how companies can protect themselves."
                  }]
              }]
          }

          headers = {"Content-Type": "application/json"}
          response = requests.post(URL, headers=headers, json=prompt)

          # Print response for debugging
          print(f"üîç API Response: {response.status_code} - {response.text}")

          if response.status_code != 200:
              print("‚ùå API Error: ", response.text)
              exit(1)

          result = response.json()
          blog_content = result.get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text", "No content generated.")

          # Save the blog
          blog_filename = f"blogs/blog_{datetime.now().strftime('%Y-%m-%d')}.md"
          os.makedirs("blogs", exist_ok=True)
          with open(blog_filename, "w", encoding="utf-8") as file:
              file.write(f"# Cybersecurity Insights - {datetime.now().strftime('%B %d, %Y')}\n\n")
              file.write(blog_content)

          print(f"‚úÖ Blog saved: {blog_filename}")
          EOF

      - name: Commit and Push Blog Post
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add blogs/
          git commit -m "üì¢ New Cybersecurity Blog Post - $(date +'%Y-%m-%d')" || echo "No changes to commit"
          git push || echo "No changes to push"
        continue-on-error: true  # Prevents workflow failure if nothing new is committed

      - name: Debugging Step
        if: failure()
        run: |
          echo "‚ùå Debugging Info: Listing Files in Directory"
          ls -R
